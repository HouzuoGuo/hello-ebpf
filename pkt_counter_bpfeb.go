// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadPkt_counter returns the embedded CollectionSpec for pkt_counter.
func loadPkt_counter() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Pkt_counterBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load pkt_counter: %w", err)
	}

	return spec, err
}

// loadPkt_counterObjects loads pkt_counter and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*pkt_counterObjects
//	*pkt_counterPrograms
//	*pkt_counterMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadPkt_counterObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadPkt_counter()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// pkt_counterSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type pkt_counterSpecs struct {
	pkt_counterProgramSpecs
	pkt_counterMapSpecs
}

// pkt_counterSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type pkt_counterProgramSpecs struct {
	CountPackets *ebpf.ProgramSpec `ebpf:"count_packets"`
}

// pkt_counterMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type pkt_counterMapSpecs struct {
	PktCount   *ebpf.MapSpec `ebpf:"pkt_count"`
	PktSize    *ebpf.MapSpec `ebpf:"pkt_size"`
	SrcDataLen *ebpf.MapSpec `ebpf:"src_data_len"`
}

// pkt_counterObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadPkt_counterObjects or ebpf.CollectionSpec.LoadAndAssign.
type pkt_counterObjects struct {
	pkt_counterPrograms
	pkt_counterMaps
}

func (o *pkt_counterObjects) Close() error {
	return _Pkt_counterClose(
		&o.pkt_counterPrograms,
		&o.pkt_counterMaps,
	)
}

// pkt_counterMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadPkt_counterObjects or ebpf.CollectionSpec.LoadAndAssign.
type pkt_counterMaps struct {
	PktCount   *ebpf.Map `ebpf:"pkt_count"`
	PktSize    *ebpf.Map `ebpf:"pkt_size"`
	SrcDataLen *ebpf.Map `ebpf:"src_data_len"`
}

func (m *pkt_counterMaps) Close() error {
	return _Pkt_counterClose(
		m.PktCount,
		m.PktSize,
		m.SrcDataLen,
	)
}

// pkt_counterPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadPkt_counterObjects or ebpf.CollectionSpec.LoadAndAssign.
type pkt_counterPrograms struct {
	CountPackets *ebpf.Program `ebpf:"count_packets"`
}

func (p *pkt_counterPrograms) Close() error {
	return _Pkt_counterClose(
		p.CountPackets,
	)
}

func _Pkt_counterClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed pkt_counter_bpfeb.o
var _Pkt_counterBytes []byte
